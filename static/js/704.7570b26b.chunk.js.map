{"version":3,"file":"static/js/704.7570b26b.chunk.js","mappings":"iLACA,EAA4B,4BAA5B,EAAwE,gCAAxE,EAAkH,0BAAlH,EAAoJ,wBAApJ,EAAwL,4BAAxL,EAA+N,2BAA/N,EAAiQ,uBAAjQ,EAAqS,6BAArS,EAA6U,2BAA7U,EAAiZ,yB,mBC2HjZ,MAtHA,WAAqB,IAAD,EAChB,GAAoCA,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAgCF,EAAAA,EAAAA,UAAwB,IAAxD,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEA,GAAoBN,EAAAA,EAAAA,UAA2B,MAA/C,eAAOO,EAAP,KAAWC,EAAX,KACA,GAAsCR,EAAAA,EAAAA,UAA8B,WAApE,eAAOS,EAAP,KAAoBC,EAApB,KAEMC,GAAmBC,EAAAA,EAAAA,QAAuB,MAG5CL,IAAIA,EAAGM,UAAY,SAACC,GACpBV,EAAY,GAAD,eAAKD,IAAL,OAAkBY,KAAKC,MAAMF,EAAaG,SAEjDN,EAAiBO,SAASP,EAAiBO,QAAQC,SAAS,EAAGR,EAAiBO,QAAQE,iBAGhGC,EAAAA,EAAAA,YAAU,WACN,IAAIC,EACAC,EAEEC,EAAc,WAChBC,QAAQC,IAAI,iBACZpB,EAAS,gBACTiB,EAAYI,WAAWC,EAAe,MAGpCA,EAAgB,WAClBtB,EAAS,KACTgB,EAAU,IAAIO,UAAU,iEAEhBC,iBAAiB,QAASN,GAClChB,EAAMc,IAKV,OAFAM,IAEO,WACHN,EAAQS,oBAAoB,QAASP,GACrCF,EAAQU,QACRC,aAAaV,MAGlB,KAEHF,EAAAA,EAAAA,YAAU,WACN,IAAMa,EAAa,WACfT,QAAQC,IAAI,QACZhB,EAAe,UAInB,OAFE,OAAFH,QAAE,IAAFA,GAAAA,EAAIuB,iBAAiB,OAAQI,GAEtB,yBAAM3B,QAAN,IAAMA,OAAN,EAAMA,EAAIwB,oBAAoB,OAAQG,MAC9C,CAAC3B,IAaJ,IAIM4B,EAAmB,WAChBlC,IAEH,OAAFM,QAAE,IAAFA,GAAAA,EAAI6B,KAAKnC,GACTC,EAAc,MAQlB,OACI,iBAAKmC,UAAWC,EAAhB,WACI,gBAAKC,IAAK5B,EAAkB0B,UAAWC,EAAvC,SACKnC,EAASqC,KAAI,SAACC,EAAGC,GAAJ,OAAU,iBAAaL,UAAWC,EAAxB,WAChB,gBAAKD,UAAWC,EAASK,IAAKF,EAAEG,MAAQH,EAAEG,MAAQC,EAC7CC,IAAI,eACT,iBAAKT,UAAWC,EAAhB,WACI,iBAAMD,UAAWC,EAAjB,SAA8BG,EAAEM,YAChC,iBAAMV,UAAWC,EAAjB,SAA0BG,EAAEO,eALNN,SAWtC,iBAAKL,UAAWC,EAAhB,WACI,qBAAUW,MAAOhD,EACPiD,SAhCK,SAACC,GACxBjD,EAAciD,EAAEC,cAAcH,QAgCZI,UAtBY,SAACF,GACjB,UAAVA,EAAEG,KAAiBnB,KAsBLE,UAAWC,EAEXiB,KAAK,WACLC,GAAG,cACb,kBAAOC,QAAQ,WAAf,sCAGA,mBAAQC,QAASvB,EACTwB,SAAgB,MAANpD,GAA8B,UAAhBE,EACxB4B,UAAWC,EAFnB,kBAICjC,IAAS,4BAAOA,EAAP,OAAcE,QAAd,IAAcA,GAAd,UAAcA,EAAIqD,eAAlB,aAAc,EAAaL","sources":["webpack://sn-ts/./src/Components/Chat/ChatPage.module.scss?be4d","Components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatPage_container__9eu1w\",\"messagesBlock\":\"ChatPage_messagesBlock__5O-4U\",\"message\":\"ChatPage_message__SygNn\",\"photo\":\"ChatPage_photo__uHi72\",\"textBlock\":\"ChatPage_textBlock__tsRcz\",\"userName\":\"ChatPage_userName__OhCYX\",\"text\":\"ChatPage_text__BOeIM\",\"inputBlock\":\"ChatPage_inputBlock__FaoDM\",\"textarea\":\"ChatPage_textarea__46QJW\",\"input\":\"ChatPage_input__c3eTR\",\"button\":\"ChatPage_button__JKvr0\"};","import React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from 'react';\nimport s from './ChatPage.module.scss'\nimport userPhoto from '../../Assets/images/userPhoto.png'\nimport {MessageType} from '../../API/chatApi';\n\n\nfunction ChatPage() {\n    const [newMessage, setNewMessage] = useState('')\n    const [messages, setMessages] = useState<MessageType[]>([])\n    const [error, setError] = useState('')\n\n    const [ws, setWs] = useState<WebSocket | null>(null)\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\n\n    const messagesBlockRef = useRef<HTMLDivElement>(null)\n\n\n    if (ws) ws.onmessage = (messageEvent) => {\n        setMessages([...messages, ...JSON.parse(messageEvent.data)])\n\n        if (messagesBlockRef.current) messagesBlockRef.current.scrollTo(0, messagesBlockRef.current.scrollHeight)\n    }\n\n    useEffect(() => {\n        let localWs: WebSocket\n        let timeoutID: NodeJS.Timeout\n\n        const closeHandle = () => {\n            console.log('WS WAS CLOSED')\n            setError('reconnect...')\n            timeoutID = setTimeout(createChannel, 3000)\n        };\n\n        const createChannel = () => {\n            setError('')\n            localWs = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n\n            localWs.addEventListener('close', closeHandle)\n            setWs(localWs)\n        }\n\n        createChannel()\n\n        return () => {\n            localWs.removeEventListener('close', closeHandle)\n            localWs.close()\n            clearTimeout(timeoutID)\n        }\n\n    }, [])\n\n    useEffect(() => {\n        const openHandle = () => {\n            console.log('OPEN')\n            setReadyStatus('ready')\n        };\n        ws?.addEventListener('open', openHandle)\n\n        return () => ws?.removeEventListener('open', openHandle)\n    }, [ws])\n\n\n    // useEffect(() => {\n    //     const closeHandle = () => {\n    //         console.log('WS WAS CLOSED')\n    //     };\n    //     ws?.addEventListener('close', closeHandle)\n    //\n    //     return () => ws?.removeEventListener('close', closeHandle)\n    // }, [ws])\n\n\n    const onChangeTextHandle = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setNewMessage(e.currentTarget.value)\n    }\n\n    const addMessageHandle = () => {\n        if (!newMessage) return\n\n        ws?.send(newMessage)\n        setNewMessage('')\n    }\n\n    const onKeyDownAddMessageHandle = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Enter') addMessageHandle()\n\n    }\n\n    return (\n        <div className={s.container}>\n            <div ref={messagesBlockRef} className={s.messagesBlock}>\n                {messages.map((u, i) => <div key={i} className={s.message}>\n                        <img className={s.photo} src={u.photo ? u.photo : userPhoto}\n                             alt=\"userPhoto\"/>\n                        <div className={s.textBlock}>\n                            <span className={s.userName}>{u.userName}</span>\n                            <span className={s.text}>{u.message}</span>\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            <div className={s.inputBlock}>\n                <textarea value={newMessage}\n                          onChange={onChangeTextHandle}\n                          onKeyDown={onKeyDownAddMessageHandle}\n                          className={s.textarea}\n                          // placeholder='your message'\n                          name=\"textarea\"\n                          id=\"textarea\"></textarea>\n                <label htmlFor=\"textarea\">\n                    write your message here\n                </label>\n                <button onClick={addMessageHandle}\n                        disabled={ws == null || readyStatus !== 'ready'}\n                        className={s.button}>send\n                </button>\n                {error && <span>{error}{ws?.onerror?.name}</span>}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ChatPage;\n"],"names":["useState","newMessage","setNewMessage","messages","setMessages","error","setError","ws","setWs","readyStatus","setReadyStatus","messagesBlockRef","useRef","onmessage","messageEvent","JSON","parse","data","current","scrollTo","scrollHeight","useEffect","localWs","timeoutID","closeHandle","console","log","setTimeout","createChannel","WebSocket","addEventListener","removeEventListener","close","clearTimeout","openHandle","addMessageHandle","send","className","s","ref","map","u","i","src","photo","userPhoto","alt","userName","message","value","onChange","e","currentTarget","onKeyDown","key","name","id","htmlFor","onClick","disabled","onerror"],"sourceRoot":""}